<?php

/**
 * @file
 * A QA Workflow
 *
 */

define('ISLANDORA_QA_STATUS__NOT_DONE', 0);
define('ISLANDORA_QA_STATUS__DONE', 1);
define('ISLANDORA_QA_STATUS__REJECTED', 2);

/**
 * Implements hook_menu().
 */
function islandora_qa_menu() {
  $items = array();
  
  $items['admin/islandora/tools/qa'] = array(
    'title' => 'Islandora QA',
    'description' => 'Setup a workflow for QA',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_qa_task_creation_form'),
    'file' => 'includes/creation.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $create_task_base = array(
    'page callback' => 'drupal_get_form',
    'access callback' => 'islandora_qa_task_edit_all',
    'file' => 'includes/creation.form.inc',
  );
  $items['islandora_qa/list/tasks/new'] = $create_task_base + array(
    'title' => t('Create a New Task'),
    'page arguments' => array('islandora_qa_task_creation_form', FALSE),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/reports/islandora_qa_tasks/%islandora_qa_task/new'] = $create_task_base + array(
    'title' => t('Create a New QA Task'),
    'page arguments' => array('islandora_qa_task_creation_form', TRUE),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $work_task_base = array(
    'page callback' => 'islandora_qa_task_page_callback',
    'access callback' => 'islandora_qa_task_work',
    'file' => 'includes/tasks.inc',
  );
  $items['islandora_qa/list/items/%islandora_qa_task/work'] = $work_task_base + array(
    'title' => 'Work on task',
    'page arguments' => array(3),
    'access arguments' => array(3),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/reports/islandora_qa_items/%islandora_qa_task/work'] = $work_task_base + array(
    'title' => 'Work on task',
    'page arguments' => array(3),
    'access arguments' => array(3),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $delete_task_base = array(
    'page callback' => 'islandora_qa_delete_task_page_callback',
    'access callback' => 'islandora_qa_task_edit',
    'file' => 'includes/menu.inc',
  );
  $items['islandora_qa/list/items/%islandora_qa_task/delete'] = $delete_task_base + array(
    'title' => 'Delete task',
    'page arguments' => array(3, FALSE),
    'access arguments' => array(3),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/reports/islandora_qa_items/%islandora_qa_task/delete'] = $delete_task_base + array(
    'title' => 'Delete task',
    'page arguments' => array(3, TRUE),
    'access arguments' => array(3),
    'type' => MENU_LOCAL_ACTION,
  );
  
  
  $items['islandora_qa/task/%'] = array(
    'title' => 'Task @item',
    'title arguments' => array('@item' => 2),
    'page callback' => 'islandora_qa_task_page_callback',
    'page arguments' => array(2),
    'access callback' => 'islandora_qa_task_work_all',
    'file' => 'includes/tasks.inc',
  );
  
  $items['islandora_qa/task/%/reject/%'] = array(
    'title' => 'Reject @item',
    'title arguments' => array('@item' => 4),
    'page callback' => 'islandora_qa_task_reject_page_callback',
    'page arguments' => array(2,4),
    'access callback' => 'islandora_qa_task_work_all',
    'file' => 'includes/tasks.inc',
  );
  
  return $items;
}

/**
 * Map values.
 *
 * Needed to avoid the task being an optional parameter in the queue displays.
 *
 * @param string $value
 *   A value to map to a task.
 *
 * @return string|bool
 *   The input $value if it was set; otherwise, FALSE.
 */
function islandora_qa_task_to_arg($value) {
  return (empty($value) || $value == '%') ? FALSE : $value;
}


/**
 * Implements hook_admin_paths_alter().
 */
function islandora_qa_admin_paths_alter(&$paths) {
    $paths['islandora_qa/task/*'] = TRUE;
    ## $paths['islandora_qa/list/items/*/work'] = TRUE;
}


function islandora_qa_task_work_all() {
  global $user;
  return user_access('ISLANDORA_QA_WORK', $user);
}

function islandora_qa_task_edit_all() {
  global $user;
  return user_access('ISLANDORA_QA_MANAGE', $user);
}

function islandora_qa_task_work($id) {
  global $user;
  module_load_include('inc', 'islandora_qa', 'includes/db');
  return islandora_qa_task_exists($id) && user_access('ISLANDORA_QA_WORK', $user);
}

function islandora_qa_task_edit($id) {
  global $user;
  module_load_include('inc', 'islandora_qa', 'includes/db');
  return islandora_qa_task_exists($id) && user_access('ISLANDORA_QA_MANAGE', $user);
}

/**
 * Implements hook_permission().
 */
function islandora_qa_permission() {
  $perms = array();

  $perms['ISLANDORA_QA_MANAGE'] = array(
    'title' => t('Islandora QA Task manage'),
    'description' => t('Allow full management of all QA Tasks'),
  );
  
  $perms['ISLANDORA_QA_WORK'] = array(
    'title' => t('Islandora QA Task work'),
    'description' => t('Allow work on any QA Task'),
  );

  return $perms;
}

/**
 * Implements hook_views_api().
 */
function islandora_qa_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'islandora_qa') . '/views',
  );
}

/**
 * Implements hook_islandora_qa_viewer_info().
 */
function islandora_qa_islandora_qa_viewer_info(){
  return array(
    'islandora_qa_default_viewer' => array(
      'label' => t('Default Viewer'),
      'callback' => 'islandora_qa_default_viewer_callback',
      'description' => t('use the  Islandora default configured viewer'),
    ),
    'islandora_qa_image_viewer' => array(
      'label' => t('Image Viewer'),
      'callback' => 'islandora_qa_image_viewer_callback',
      'description' => t('display a web-friendly image datastream'),
    ),
  );
}

function islandora_qa_default_viewer_callback($params = array()){
  module_load_include('inc', 'islandora_qa', 'includes/viewers');

  $type = $params['function'];
  switch($type){
    case 'view':
      return _islandora_qa_default_viewer($params);
    default:
      return null;
  }
}

function islandora_qa_image_viewer_callback($params = array()){
  module_load_include('inc', 'islandora_qa', 'includes/viewers');

  $type = $params['function'];
  switch($type){
    case 'view':
      return _islandora_qa_image_viewer($params);
    case 'options':
      return islandora_qa_image_viewer_options_form();
    case 'process':
      return islandora_qa_image_viewer_process_options($params);
    default:
      return null;
  }
}
